//
//  RateReminderManager.swift
//  NStackSDK
//
//  Created by Andrew Lloyd on 11/01/2022.
//  Copyright Â© 2022 Nodes ApS. All rights reserved.
//

#if canImport(UIKit)

import UIKit

public class RateReminderManager {
    // MARK: - Properties
    internal var repository: RateReminderRepository

    // MARK: - Init
    public init(repository: RateReminderRepository) {
        self.repository = repository
    }

    /// Gets Rate Reminder Actions
    public func getRateActions() {
        repository.getRateReminderActions { result in
            switch result {
            case .success(let actions):
                try? self.writeActionsToFile(actions: actions)
            case .failure(let error):
                //TODO - handle error, do we do anything?
                print(error.localizedDescription)
            }
        }
    }
    
    public enum RateReminderActions: String {
        case appOpened
        case buttonTapped
    }
    
    private func writeActionsToFile(actions: [String]) throws {
        let codeString = generateActionEnumStringFromArray(actions: actions)

        try! codeString.write(toFile: "/Users/andrewlloydnodes/NStackTest/NStackTest/Resources/NStack/RateReminderActions.swift",
                             atomically: true,
                             encoding: String.Encoding.utf8)
        
        print("RATE REMINDER ACTIONS WRITTEN TO FILE")
        
    }
    
    private func generateActionEnumStringFromArray( actions: [String]) -> String {
        var indent = Indentation(level: 0)
        var result = "// File generated by NStack SDK\n\nimport Foundation\n\npublic enum RateReminderActions: String {\n"

        indent = indent.nextLevel()
        
        for action in actions {
            result += indent.string()
            result += "case \(action)\n"
        }

        indent = indent.previousLevel()
        result += indent.string() + "}\n"
        
        return result
    }
}

#else
public class RateReminderManager {
    // MARK: - Properties
    internal var repository: RateReminderRepository

    // MARK: - Init
    public init(repository: RateReminderRepository) {
        self.repository = repository
    }

    /// Gets Rate Reminder Actions
    public func getRateActions() {
        fatalError()
    }
}
#endif

public struct Indentation {
    public static let defaultString = String(repeating: " ", count: 4)
    
    public let level: Int
    public let customString: String?
    
    public init(level: Int) {
        self.level = level
        self.customString = nil
    }
    
    public init(level: Int, customString: String?) {
        self.level = level
        self.customString = customString
    }
}

public extension Indentation {
    func string() -> String {
        var string = ""
        let indent = (customString ?? Indentation.defaultString)
        
        for _ in 0..<level {
            string += indent
        }
        
        return string
    }
}

public extension Indentation {
    func nextLevel() -> Indentation {
        return Indentation(level: level + 1, customString: customString)
    }
    
    func previousLevel() -> Indentation {
        return Indentation(level: level > 0 ? level - 1 : 0, customString: customString)
    }
}
